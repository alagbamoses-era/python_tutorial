10. Objects and Class 

We have already learnt that Python is an object oriented programming 
language. There are other languages that are procedure oriented that emphasize 
on functions, but in Python, the stress is on objects. But then, what is an 
object? Simply put, an object is a collection of methods (functions) that act 
on data (variables) which are also objects. The blueprint for these objects is a class. 

Consider a class a sketch or a prototype that has all the details about an 
object. 

If your program were a car, a class would contain all the details about the 
design, the chassis, where tires are, and what the windshield is made of. It 
would be impossible to build a car without a class defining it. The car is 
the object. 

Because many cars can be built based on the prototype, we can create many 
objects from a class. We can also call an object an instance of a class, and 
the process by which it is created is called instantiation.


Defining a Class 

Classes are defined using the keyword class. Just like a function, a class 
should have a documentation string (docstring) which briefly explains what 
the class is and what it does. While the docstring is not mandatory, it is a 
good practice to have it. Here is a simple definition of a class called 
NewClass: 

class NewClass: 
       """This is the docstring of the
       class NewClass that we Just
        created. Our program now has
        a new class""" 

        pass 

When you create a new class, a new local namespace that defines all its 
attributes is created. Attributes in this case may include functions and data 
structures. In it, it will contain special attributes that start with 
__ (double underscores) e.g. __doc__ that defines the docstring of the class. 

When a class is defined, a new class object with the same name is created. 

The new class object is what we can use to access the different attributes 
and to instantiate the new objects of our new class. 


Exercise61: Creating a new class 

class NewClass: 

      """This is our first class. What it   
      does is display a string text and  
      a value of variable name""" 
      name = str(input("Enter your 
      name: ")) 

      def greeting (name): 
             print ("Hello", name) 
           
  print (NewClass.name) 
  print (NewClass.greeting) 
  print (NewClass._doc_) 

What does your console display when you run the script in Exercise61?


Creating an Object 

So far, we have learnt that we can access the different attributes of a class 
using the class objects. We can use these objects to also instantiate new 
instances of that class using a procedure a lot similar to calling a function. 

MyObject = NewClass() 

In the example above, a new instance object called MyObject is created. 

This object can be used to access the attributes of the class NewClass using 
the class name as a prefix. 

The attributes in this case may include methods and variables. The methods of 
an object are the corresponding functions of a class meaning that any class 
attribute function object defines the methods for objects in that class. 

For instance, because NewClass.greeting is a function object and an attribute 
of NewClass, MyObject.greeting will be a method object.



Exercise62: Creating an Object 

class NewClass: 
      """This is our first class. What it
      does is display a string text and
       a value of variable name""" 

       name = str(input("Enter your
       name: ")) 

      def greeting (name): 
          print ("Hello", name) 
          MyObject = NewClass() 

#Creates a new NewClass object 
print (NewClass.greeting) 
print (MyObject.greeting) 
MyObject.greeting() # Calling function greeting() 

In Exercise62, the name parameter is within the function definition of the 
class, but we called the method using the statement MyObject.greeting() 
without specifying any arguments and it still worked. This is because when an 
object calls a method defined within it, the object itself passes as the first argument. 



Therefore, in this case, MyObject.greeting() translates to 
NewClass.greeting(MyObject). 

Generally speaking, when you call a method with a list of x arguments, it is 
the same as calling the corresponding function using an argument list created 
when the method’s object is inserted before the first argument. As a result, 
the first function argument in a class needs to be the object itself. 

In Python, this is typically called self but it can be assigned any other 
name. It is important to understand class objects, instance objects, function 
objects, and method objects and what sets them apart.


Constructors 

In python, the __init__() function is special because it is called when a new 
object of its class is instantiated. This object is also called a constructor 
because it is used to initialize all variables. 

Exercise63: Constructors 

MyObject.greeting() # 

class ComplexNumbers: 
      def __init__(self, x = 0, y = 0): 
           self.real = x 
           self.imagined = y 

     def getNumbers(self): 
          print ("Complex numbers are: 
          {0}+{1}j".format(self.real, 
          self.imagined)) 

Object1 = ComplexNumbers(2, 3) #Creates a new ComplexNumbers object 

Object1.getNumbers() #Calls getNumbers() function 

Object2 = ComplexNumbers(10) #Creates another ComplexNumbers object 

Object2.attr = 20 #Creates a new attribute 'attr' 

print((Object2.real,Object2.imagined, Object2.attr)) 

Object1.attr #Generates an error because c1 object doesn't have attribute 
'attr' 

In the above exercise, we have defined a new class that represents complex 
numbers. We have defined two functions, the __init__() function that initializes the variables and the getNumbers() function to properly display the numbers. 

Note that the attributes of the objects in the exercise are created on the 
fly. For instance, the new attribute attr for Object2 was created but one for 
Object1 was not (hence the error).


Deleting Attributes and Objects 

You can delete the attributes of an object or even the object itself at any 
time using the statement del. 

Exercise64: Deleting Attributes and Objects 

class ComplexNumbers: 
     def _init_(self, x = 0, y = 0): 
          self.real = x 
          self.imagined = y 

     def getNumbers(self): 
          print ("Complex numbers are: 
          {0}+{1}j".format(self.real, 
          self.imagined)) 

Object1 = ComplexNumbers(2, 3) #Creates a new ComplexNumbers object 

Object1.getNumbers() #Calls getNumbers() function 

Object2 = ComplexNumbers(10) #Creates another ComplexNumbers object 

Object2.attr = 20 #Creates a new attribute 'attr'


print ((Object2.real, Object2.imagined, Object2.attr)) 

del ComplexNumbers.getNumbers 

Object1.getNumbers() 

The error you get when you run the script in Exercise64 shows that the 
attribute getNumbers() has been deleted. Note, however, that since a new 
instance is created in memory when a new instance of the object is created, 
the object may continue to exist in memory even after it is deleted until the 
garbage collector automatically destroys unreferenced objects.


OOP Fundamentals in Python 

Classes and Objects 

Classes are blueprints for creating objects. An object is an instance of a 
class. A class defines properties and behaviors using variables and methods. 
Example: 

class Dog: 
    def __init_(self, name): 
        self.name = name 

my_dog = Dog("Buddy") 

__init__ constructor and instance variables 

The _init_ method initializes the object's attributes. Instance variables are 
unique to each object. 
Example: 

class Car: 
    def _init_(self, brand): 
         self.brand = brand 

c1 = Car("Toyota") 


Instance methods and attributes 

Instance methods operate on instance data. They always have 'self' as the 
first parameter. 

Example: 

class Person: 
      def _init_(self, name): 
           self.name = name 

      def greet(self): 
           print("Hello, my name is", self.name)


Class variables and methods
 (@classmethod) 


Class variables are shared across all instances. @classmethod is used to 
access class variables or methods at the class level. 


Example: 

class Employee: 
     company = "TechCorp" 

     def _init_(self, name): 
          self.name = name 

    @classmethod 

    def show_company(cls): 
          print(cls.company) 


Static methods (@staticmethod) 

@staticmethod defines a method that doesn't access instance or class data. 
It's used for utility functions. Example:

class Math: 
    @staticmethod 

    def add(a, b): 
        return a + b


Inheritance (single, multilevel, multiple) 

Inheritance allows one class to derive properties from another. 

Single: One class inherits another. 

Multilevel: Class C inherits B which inherits A. 

Multiple: Class inherits from multiple classes. Example: 

class A: pass   # base class

class B(A): pass # single inheritance

class C(B): pass  # multilevel inheritance

class D(X, Y): pass  # multiple inheritance


#### NOTE: To call any functiion-method in a child class into parent 
class, that child class must be passed into  parent class bracket.

e.g class Parent(Child)


Method overriding 

In a subclass, you can override methods of the parent class by defining them 
again. Example: 

class Animal: 
     def speak(self): 
         print("Animal speaks") 


class Dog(Animal): 
    def speak(self): 
         print("Dog barks")


super() function 

The super() function is used to call a method from the parent class. 
Example: 

class Parent: 
    def _init_(self): 
        print("Parent init") 

class Child(Parent): 
       def _init_(self): 
             super()._init_() 
             print("Child init")


Advance OOP in python3


1. Encapsulation (private/protected members)

Encapsulation hides internal object details and controls access.

class Demo:
    def _init_(self):
        self.public = "I am public"
        self._protected = "I am protected"
        self.__private = "I am private"

    def get_private(self):
        return self.__private

obj = Demo()
print(obj.public)       # OK
print(obj._protected)   # Possible, but not recommended
print(obj.get_private())  # Proper access to private



Encapsulation is one of the core concepts of Object-Oriented 
Programming (OOP). It refers to the concept of bundling data 
(attributes) and methods (functions) that operate on the data within 
a single unit, typically a class. Encapsulation is used to restrict 
access to certain details of an object and to prevent unauthorized 
access or modification of certain attributes and methods.

Key Points of Encapsulation:

1. Private attributes/methods: These are meant to be hidden from 
outside access.


2. Public attributes/methods: These are accessible from outside the 
class.


3. Getter and Setter methods: These methods allow controlled access 
to private attributes.



In Python, encapsulation is achieved by using:

Public (no underscore)

Protected (_single underscore)

Private (__double underscore)





class Car:
    def _init_(self, make, model, year):
        # Public attribute
        self.make = make
        
        # Protected attribute (by convention, not enforced)
        self._model = model
        
        # Private attribute (by convention, not enforced)
        self.__year = year

    # Public method to access private attribute
    def get_year(self):
        return self.__year

    # Public method to set private attribute
    def set_year(self, year):
        if year > 1900:  # Basic validation
            self.__year = year
        else:
            print("Invalid year.")

# Public method
    def display_info(self):
        print(f"Car make: {self.make}, Model: {self._model}, Year: 
	{self.get_year()}")

# Creating an instance of Car
car = Car("Toyota", "Camry", 2020)

# Accessing public attribute
print(car.make)  # Output: Toyota

# Accessing protected attribute (possible but not recommended)
print(car._model)  # Output: Camry

# Accessing private attribute (will give error directly)
# print(car._year)  # AttributeError: 'Car' object has no attribute 
  '_year'

# Access private attribute via getter
print(car.get_year())  # Output: 2020

# Modifying private attribute via setter
car.set_year(2025)


print(car.get_year())  # Output: 2025

# Displaying car info
car.display_info()  # Output: Car make: Toyota, Model: Camry, 
 Year: 2025


Explanation:

1. Public Attributes and Methods:

make is a public attribute, and display_info() is a public method, 
so they are directly accessible.



2. Protected Attributes:

_model is a protected attribute. This means it can be accessed 
directly, but it is intended to be treated as private by convention. 
It’s not enforced by Python (you can still access it directly).

3. Private Attributes:

__year is a private attribute. Python uses name mangling to ensure it 
is not easily accessible from outside the class. If you try to access
__year directly, it will raise an error.

To access or modify a private attribute, you can use getter 
(get_year()) and setter (set_year()) methods. This provides controlled access to private data.

When to Use Encapsulation:

Control over data: It allows you to enforce rules, such as validation 
or modification logic, when accessing or setting data.

Hiding internal details: You can hide the complexity of your class 
from the outside world. Only provide an interface to interact with 
the object.

Maintainability: You can change the internal working of a class 
without affecting the external code that uses it.

Advantages of Encapsulation:

1. Data Hiding: Prevents unauthorized access or modification of 
sensitive data.


2. Flexibility and Maintainability: You can change the internal logic 
of a class without affecting code outside the class.


3. Control: Through getter and setter methods, you can enforce rules 
for setting and retrieving data (like validation).

What are Getters and Setters?

A getter method retrieves (gets) the value of a private attribute.

A setter method modifies (sets) the value of a private attribute, 
usually with some validation.


This is important because you don't want users of your class to 
directly change important data without checks.


Example :

class Student:
    def _init_(self, name, age):
        self.__name = name       # private attribute
        self.__age = age         # private attribute

    # Getter for name
    def get_name(self):
        return self.__name

    # Setter for name
    def set_name(self, name):
        if name:
            self.__name = name
        else:
            print("Name cannot be empty.")

    # Getter for age
    def get_age(self):
        return self.__age

# Setter for age
    def set_age(self, age):
        if age > 0:
            self.__age = age
        else:
            print("Age must be positive.")

# Usage
s = Student("Alice", 20)

# Accessing values using getters
print(s.get_name())  # Output: Alice
print(s.get_age())   # Output: 20

# Changing values using setters
s.set_name("Bob")
s.set_age(25)

print(s.get_name())  # Output: Bob
print(s.get_age())   # Output: 25

# Trying to set invalid age
s.set_age(-5)  # Output: Age must be positive.


Pythonic Way: Using @property

Python provides a shortcut using @property and @setter. It looks like accessing an attribute, but actually uses getter/setter under the hood!

Example:

class Employee:
    def _init_(self, salary):
        self.__salary = salary

    @property
    def salary(self):
        return self.__salary

    @salary.setter
    def salary(self, value):
        if value > 0:
            self.__salary = value
        else:
            print("Salary must be positive.")

# Usage
e = Employee(5000)

print(e.salary)  # No need to call get_salary()!

e.salary = 6000  # No need to call set_salary()!

print(e.salary)

e.salary = -1000  # Invalid salary, prints error.

Output:

5000
6000
Salary must be positive.
Summary


---

When should you use Getter and Setter?

When you want to validate data before setting.

When you want to restrict changes to internal data.

When you may change internal implementation later without breaking 
code that uses your class

ATM Machine  Project (with Encapsulation)

class ATM:
    def _init_(self, account_holder, initial_balance):
        self.__account_holder = account_holder  # private attribute
        self.__balance = initial_balance         # private attribute

    # Getter for balance (only to view balance)
    @property
    def balance(self):
        return self.__balance

    # Method to deposit money
    def deposit(self, amount):
        if amount > 0:
            self.__balance += amount
            print(f"Deposited ${amount}. New balance: ${self.__balance}")
        else:
            print("Deposit amount must be positive.")

# Method to withdraw money
    def withdraw(self, amount):
        if amount > 0:
            if self.__balance >= amount:
                self.__balance -= amount
                print(f"Withdrew ${amount}. New balance: ${self.__balance}")
            else:
                print("Insufficient balance.")
        else:
            print("Withdrawal amount must be positive.")

    # Method to display account info
    def account_info(self):
        print(f"Account Holder: {self.__account_holder}")
        print(f"Current Balance: ${self.__balance}")

# Usage
atm = ATM("Alice", 1000)

# Display account info
atm.account_info()


# Deposit money
atm.deposit(500)

# Withdraw money
atm.withdraw(300)

# Try to withdraw more than available
atm.withdraw(2000)

# Display balance using property
print(f"Final Balance: ${atm.balance}")


Sample Output:

Account Holder: Alice
Current Balance: $1000
Deposited $500. New balance: $1500
Withdrew $300. New balance: $1200
Insufficient balance.
Final Balance: $1200



Encapsulation via Method Naming Conventions

1. Public Methods:  

class MyClass:
    def public_method(self):
        print("This is a public method.")


2. Protected Methods:  

class MyClass:
    def _protected_method(self):
        print("This is a protected method.")


3. Private Methods:   

class MyClass:
    def __private_method(self):
        print("This is a private method.")

Internally, _private_method becomes _MyClass_private_method. 
Attempting to call __private_method from outside the class will result in an 
AttributeError:


obj = MyClass()
obj.__private_method()  # Raises AttributeError

However, it can still be accessed using the mangled name:

obj.MyClass_private_method()  # This works



Summary

Single underscore (_):  

Double underscore (__):


Attributes of a Class in Python

An attribute is a variable that belongs to a class or an object.

Attributes store data about the object.

They describe the "state" or "properties" of the object.


Think of a class like a blueprint for a house —
Attributes are like the color, number of rooms, or size of that house.


Example:

class Car:
    # Constructor method
    def _init_(self, brand, color, speed):
        self.brand = brand      # attribute
        self.color = color      # attribute
        self.speed = speed      # attribute


# Create an object
my_car = Car("Toyota", "Red", 120)

# Access attributes
print(my_car.brand)  # Output: Toyota
print(my_car.color)  # Output: Red
print(my_car.speed)  # Output: 120

In this example:

brand, color, and speed are attributes of the Car class.

my_car is an object, and it has its own brand, color, and speed values.


Types of Attributes

Example with Class Attribute:

class Car:
    wheels = 4  # class attribute

    def _init_(self, brand, color):
        self.brand = brand    # instance attribute
        self.color = color    # instance attribute

# All cars have 4 wheels
print(Car.wheels)  # Output: 4

# Create object
car1 = Car("Honda", "Blue")
print(car1.brand)   # Output: Honda
print(car1.color)   # Output: Blue
print(car1.wheels)  # Output: 4 (from class attribute)

wheels is a class attribute (common to all cars).

brand and color are instance attributes (different for each car).




2. Polymorphism

Polymorphism lets different classes implement the same interface.

class Cat:
    def speak(self):
        return "Meow"

class Dog:
    def speak(self):
        return "Bark"

animals = [Cat(), Dog()]
for animal in animals:
    print(animal.speak())  # Each calls its own speak()



3. Abstraction (via Abstract Base Classes - ABC)

Abstract classes define a common interface using abc.

from abc import ABC, abstractmethod

class Animal(ABC):
    @abstractmethod
    def make_sound(self):
        pass

class Dog(Animal):
    def make_sound(self):
        return "Bark"

d = Dog()
print(d.make_sound())



4. Magic / Dunder Methods (_str, __repr_, etc.)

Dunder methods customize how objects behave.

class Book:
    def _init_(self, title):
        self.title = title

    def _str_(self):
        return f"Book: {self.title}"

    def _repr_(self):
        return f"Book('{self.title}')"

b = Book("1984")
print(str(b))
print(repr(b))



5. Operator Overloading

Allows operators to work with custom objects.

class Vector:
    def _init_(self, x, y):
        self.x = x
        self.y = y

    def _add_(self, other):
        return Vector(self.x + other.x, self.y + other.y)

v1 = Vector(2, 3)
v2 = Vector(1, 4)
v3 = v1 + v2  # Uses _add_()
print(v3.x, v3.y)



6. Mixins

A mixin in Python is a type of multiple inheritance that allows you to add 
reusable functionality to classes without using deep inheritance trees. 
Mixins are not meant to stand on their own—they are meant to be mixed in with 
other classes.

Key Characteristics of Mixins:

A mixin class does not define its own _init_.

It provides extra methods that other classes can use.

It is used alongside other base classes via multiple inheritance.

Mixins provide reusable methods across classes.


class LoggerMixin:
    def log(self, msg):
        print(f"[LOG]: {msg}")

class Worker(LoggerMixin):
    def work(self):
        self.log("Working hard...")

w = Worker()
w.work()




7. Multiple Inheritance Resolution (MRO)

MRO determines method lookup order.

class A: pass
class B(A): pass
class C(A): pass
class D(B, C): pass

print(D._mro_)  # Method Resolution Order


MRO (Method Resolution Order) in Python 3

MRO defines the order in which Python looks for a method or attribute in a 
class hierarchy when using multiple inheritance.

Python uses the C3 Linearization Algorithm (a.k.a. C3 superclass 
linearization) to compute the MRO.


---

Basic Example

class A:
    def do_something(self):
        print("A")

class B(A):
    def do_something(self):
        print("B")

class C(A):
    def do_something(self):
        print("C")

class D(B, C):
    pass

d = D()
d.do_something()
print(D.mro())



Python looks in D, then B, then C, then A, then object.

That’s the MRO order.



---

Why MRO Matters (Especially with Mixins)

Mixins often use super() to allow cooperative multiple inheritance:

class LoggingMixin:
    def save(self):
        print("Logging save")
        super().save()

class SaveMixin:
    def save(self):
        print("Saving data")
        super().save()

class Base:
    def save(self):
        print("Base save")

class MyModel(LoggingMixin, SaveMixin, Base):
    pass

obj = MyModel()
obj.save()
print(MyModel.mro())



8. _slots_ for Memory Optimization

_slots_ prevents dynamic creation of instance dictionaries, saving memory.

class Point:
    _slots_ = ['x', 'y']

    def _init_(self, x, y):
        self.x = x
        self.y = y

p = Point(1, 2)
print(p.x, p.y)


In Python, the _slots_ mechanism is used to optimize memory by preventing the 
creation of __dict__ and __weakref__ for instances. This can significantly 
reduce memory usage, especially when creating many instances of a class.



---

What __slots__ Does

By default, Python uses a dictionary (__dict__) to store instance attributes.

__slots__ tells Python to only reserve space for a fixed set of attributes, 
using a more memory-efficient structure (like a C struct).



---

Basic Example Without __slots__

class NormalClass:
    def _init_(self, x, y):
        self.x = x
        self.y = y

Each instance has a __dict__, allowing dynamic attribute assignment, but it 
uses more memory.


---

Optimized with __slots__

class SlottedClass:
    __slots__ = ('x', 'y')

    def __init__(self, x, y):
        self.x = x
        self.y = y

Now instances don’t have __dict__.

You cannot add new attributes outside of those listed in __slots__.


Comparison Example

import sys

class NoSlots:
    def __init__(self):
        self.a = 1
        self.b = 2

class WithSlots:
    _slots_ = ['a', 'b']
    def __init__(self):
        self.a = 1
        self.b = 2

print(sys.getsizeof(NoSlots()))     # e.g., 56 bytes (plus _dict_)
print(sys.getsizeof(WithSlots()))   # e.g., 40 bytes

The exact numbers may vary, but WithSlots usually consumes less memory.


---

Limitations of __slots__

No support for dynamic attributes.


No _dict, unless explicitly added: __slots__ = ['x', 'y', '_dict_']

Inheritance with _slots_ is tricky—each subclass needs to define its own 
_slots_.






Python OOP Design Principles and Patterns




1. SOLID Principles

These are five principles that help make software designs more understandable, flexible, and maintainable.

S – Single Responsibility Principle

A class should have only one reason to change. It should do one thing only.

class Invoice:
    def _init_(self, amount):
        self.amount = amount

    def calculate_total(self):
        return self.amount * 1.18  # tax

class InvoicePrinter:
    def print_invoice(self, invoice):
        print(f"Total: {invoice.calculate_total()}")




O – Open/Closed Principle

Software entities should be open for extension, but closed for modification.

class Shape:
    def area(self):
        raise NotImplementedError

class Circle(Shape):
    def _init_(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius * self.radius


L – Liskov Substitution Principle

Subtypes must be substitutable for their base types.

class Bird:
    def fly(self):
        pass



class Sparrow(Bird):
    def fly(self):
        print("Flying")

def make_it_fly(bird: Bird):
    bird.fly()



I – Interface Segregation Principle

Clients should not be forced to depend on interfaces they do not use.

In Python, use abstract base classes to define focused interfaces.

from abc import ABC, abstractmethod

class Workable(ABC):
    @abstractmethod
    def work(self):
        pass

class Eater(ABC):
    @abstractmethod
    def eat(self):
        pass


D – Dependency Inversion Principle

Depend on abstractions, not on concrete implementations.

class Database(ABC):
    @abstractmethod
    def save(self, data):
        pass

class MySQLDatabase(Database):
    def save(self, data):
        print("Saving to MySQL")

class Service:
    def _init_(self, db: Database):
        self.db = db

    def save_data(self, data):
        self.db.save(data)




2. DRY, KISS, YAGNI Principles

DRY – Don’t Repeat Yourself

Avoid duplicating logic or code.

KISS – Keep It Simple, Stupid

Design and code should be simple and easy to understand.

YAGNI – You Aren’t Gonna Need It

Don’t add functionality until it's necessary.



3. Composition vs Inheritance

Inheritance: “is-a” relationship

class Dog(Animal):
    pass

Composition: “has-a” relationship

class Engine:
    def start(self):
        print("Engine started")

class Car:
    def _init_(self):
        self.engine = Engine()

    def start(self):
        self.engine.start()

Use composition over inheritance when possible for better flexibility.



4. Design Patterns

Singleton Pattern

Ensures a class has only one instance.

class Singleton:
    _instance = None

    def _new_(cls):
        if cls._instance is None:
            cls.instance = super().new_(cls)
        return cls._instance



Factory Pattern

Creates objects without exposing the instantiation logic.

class Dog:
    def speak(self):
        return "Woof"

class Cat:
    def speak(self):
        return "Meow"

class AnimalFactory:
    def get_animal(animal_type):
        if animal_type == "dog":
            return Dog()
        elif animal_type == "cat":
            return Cat()


####### continueeee #########
Observer Pattern

An object (subject) notifies observers when its state changes.

class Subject:
    def _init_(self):
        self._observers = []

    def register(self, observer):
        self._observers.append(observer)

    def notify(self, data):
        for observer in self._observers:
            observer.update(data)

class Observer:
    def update(self, data):
        print("Got data:", data)


Strategy Pattern

Defines a family of algorithms and makes them interchangeable.

class Context:
    def _init_(self, strategy):
        self.strategy = strategy

    def execute(self, data):
        return self.strategy(data)

def strategy_add(data):
    return sum(data)

def strategy_max(data):
    return max(data)

ctx = Context(strategy_add)
print(ctx.execute([1, 2, 3]))




Adapter Pattern

Allows incompatible interfaces to work together.

class EuropeanPlug:
    def voltage(self):
        return 230

class USAdapter:
    def _init_(self, plug):
        self.plug = plug

    def voltage(self):
        return self.plug.voltage() / 2  # Convert for US




Decorator Pattern (Class-based)

Adds new functionality to an object dynamically.

class Coffee:
    def cost(self):
        return 5

class MilkDecorator(Coffee):
    def _init_(self, base):
        self.base = base

    def cost(self):
        return self.base.cost() + 2

coffee = MilkDecorator(Coffee())
print(coffee.cost())  # Output: 7




Python OOP – Real-World Applications



1. Build Reusable Libraries Using Classes

Organize your utility code into reusable, modular components using classes.

class MathUtils:
    @staticmethod
    def add(x, y):
        return x + y

    @staticmethod
    def multiply(x, y):
        return x * y

Use case: Create a utility package (math_utils.py) for use across multiple 
projects.


2. Use OOP in GUI Apps (e.g., PyQt, PySide, Tkinter)

GUI frameworks are class-based. Each widget and window is typically a class.

Example with Tkinter:

import tkinter as tk

class MyApp:
    def _init_(self, root):
        self.label = tk.Label(root, text="Hello World")
        self.label.pack()

root = tk.Tk()
app = MyApp(root)
root.mainloop()

Use case: Build scalable desktop apps with proper structure and event handling.



3. Apply OOP in Django Models and Views

Django models, views, and forms are all class-based.

Example Django model:

from django.db import models

class Book(models.Model):
    title = models.CharField(max_length=100)
    author = models.CharField(max_length=100)

Example class-based view:

from django.views import View
from django.http import HttpResponse

class HomeView(View):
    def get(self, request):
        return HttpResponse("Welcome!")

Use case: MVC pattern implemented using OOP for web applications.




4. Build Games with Pygame Using OOP

Games involve entities like players, enemies, etc., which are naturally 
modeled with classes.

import pygame

class Player:
    def _init_(self, x, y):
        self.rect = pygame.Rect(x, y, 50, 50)

    def draw(self, screen):
        pygame.draw.rect(screen, (255, 0, 0), self.rect)

Use case: Object-oriented game loops with custom classes for sprites and game 
logic.



5. Create REST APIs Using OOP Structure in Flask/Django

Organize API endpoints using classes (especially in Django REST Framework).

Example using Flask + class-based view:

from flask import Flask, jsonify
from flask.views import MethodView

app = Flask(_name_)

class HelloAPI(MethodView):
    def get(self):
        return jsonify({'message': 'Hello, API'})

app.add_url_rule('/api/hello', view_func=HelloAPI.as_view('hello'))

Use case: Organize large APIs with versioning, middleware, and modular 
structure.


 
n OOP – Testing and Documentation



1. Unit Testing OOP Code with unittest or pytest

Object-oriented code is naturally testable using test classes.

Example using unittest:

import unittest

class Calculator:
    def add(self, x, y):
        return x + y

class TestCalculator(unittest.TestCase):
    def test_add(self):
        calc = Calculator()
        self.assertEqual(calc.add(2, 3), 5)



if _name_ == "_main_":
    unittest.main()

Example using pytest:

class Calculator:
    def add(self, x, y):
        return x + y

def test_add():
    calc = Calculator()
    assert calc.add(2, 3) == 5



2. Mocking Classes and Methods

Mock external or heavy dependencies during testing to isolate logic.

from unittest.mock import MagicMock


class Database:
    def fetch_data(self):
        pass

class Service:
    def _init_(self, db):
        self.db = db

    def get_data(self):
        return self.db.fetch_data()

def test_service():
    mock_db = MagicMock()
    mock_db.fetch_data.return_value = "mocked data"
    service = Service(mock_db)
    assert service.get_data() == "mocked data"



3. Docstrings for Classes and Methods

Use docstrings to describe the purpose, parameters, and return values.

class Rectangle:
    """
    Represents a rectangle.

    Attributes:
        width (int): The width of the rectangle.
        height (int): The height of the rectangle.
    """
    def _init_(self, width, height):
        """
        Initializes a Rectangle.

        Args:
            width (int): Width of the rectangle.
            height (int): Height of the rectangle.
        """
        self.width = width
        self.height = height

    def area(self):
        """Returns the area of the rectangle."""
        return self.width * self.height



4. Using Sphinx to Document OOP Codebases

Sphinx auto-generates documentation from your Python code and docstrings.

Steps:

1. Install Sphinx:

pip install sphinx


2. Generate a new Sphinx project:

sphinx-quickstart





3. Enable autodoc in conf.py:

extensions = ['sphinx.ext.autodoc']


4. Create .rst files and use .. automodule:: your_module and .. autoclass:: YourClass.


5. Build documentation:

make html



Use case: For documenting large OOP projects with full API references.



Python OOP – Extras for Mastery




1. Metaclasses

Metaclasses are classes that define the behavior of other classes.

Example:

class MyMeta(type):
    def _new_(cls, name, bases, dct):
        print(f"Creating class: {name}")
        return super()._new_(cls, name, bases, dct)

class MyClass(metaclass=MyMeta):
    pass

Use case: Enforce constraints, auto-register classes, modify class definitions dynamically.



2. Descriptors (_get, __set_)

Descriptors control access to attributes.

class Descriptor:
    def _get_(self, instance, owner):
        return instance._value

    def _set_(self, instance, value):
        instance._value = value

class MyClass:
    attr = Descriptor()

obj = MyClass()
obj.attr = 10
print(obj.attr)

Use case: Custom attribute access, validation, computed fields (used in Django ORM).



3. Context Managers (_enter, __exit_)

Use context managers for resource management.

class FileOpener:
    def _init_(self, filename):
        self.filename = filename

    def _enter_(self):
        self.file = open(self.filename)
        return self.file

    def _exit_(self, exc_type, exc_value, traceback):
        self.file.close()

with FileOpener("data.txt") as f:
    print(f.read())

Use case: Manage resources like files, sockets, and database connections.


4. Class Decorators

Decorators that modify or enhance class behavior.

def singleton(cls):
    instances = {}
    def wrapper(*args, **kwargs):
        if cls not in instances:
            instances[cls] = cls(*args, **kwargs)
        return instances[cls]
    return wrapper

@singleton
class Database:
    pass

Use case: Logging, enforcing singleton, registering classes.


5. Data Classes (@dataclass)

Simplify class creation for data containers.

from dataclasses import dataclass

@dataclass
class Point:
    x: int
    y: int

Use case: Reduces boilerplate in classes used for storing structured data.



6. Typing & Generics (typing, TypeVar)

Helps in writing type-safe, generic code.

from typing import List, TypeVar, Generic

T = TypeVar('T')

class Stack(Generic[T]):
    def _init_(self):
        self.items: List[T] = []

    def push(self, item: T):
        self.items.append(item)

    def pop(self) -> T:
        return self.items.pop()

Use case: Building reusable and type-safe libraries, better editor support and static analysis.




